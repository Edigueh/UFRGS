; Nome completo : André Schaidhauer Luckmann
; Número do cartão UFRGS: 00601117

ORG 0

INIT:
    LDA CONST_ZERO
    STA p1_MSB     ; zera parte alta de p1_MSB
    LDA CONST_DOIS
    STA p1_LSB     ; armazena '2' na parte baixa de p1

VERIFICA_P1_EH_PRIMO:
    LDA CONST_DOIS
    STA VAR_DIV     ; armazena '2'em div

    P1_EH_IGUAL_DIV:
        LDA p1_LSB
        SUB VAR_DIV
        STA VAR_LSB_AUX ; VAR_LSB_AUX = p1_LSB - VAR_DIV
        LDA p1_MSB
        JB DEU_BORROW_P1	; se deu borrow na subtração, temos que tirar manualmente
        JMP NAO_DEU_BORROW_P1	; se não, dá pra tirar VAR_LSB_AUX direto

        DEU_BORROW_P1:
            SUB CONST_UM       ; tira '1' da parte alta

        NAO_DEU_BORROW_P1:
            ADD VAR_LSB_AUX
            JZ P1_EH_PRIMO     ; p1_MSB + p1_LSB = 0? Se sim, é porque p1 é igual a div, o que significa que p1 é primo

    MOD_P1_DIV: ; p1 % div
        INICIALIZA_P1:
            LDA p1_MSB
            STA DIVD_P_MSB  ; variável do dividendo p1 msb
            LDA p1_LSB
            STA DIVD_P_LSB  ; variável do dividendo p1 lsb
            LDA CONST_OITO
            STA VAR_I       ; contador = 8

        REPETIR_P1: ; início do laço
            LDA DIVD_P_LSB
            SHL
            STA DIVD_P_LSB  ; desloca DIVD_P_LSB p/esquerda
            LDA DIVD_P_MSB
            ROL             ; desloca DIVD_P_MSB p/esquerda
            STA DIVD_P_MSB  ; msbit de DIVD_P_MSB em carry
            JC p1_MSB_MAIOR ; se C=1, dividendo > divisor
            LDA DIVD_P_MSB
            SUB VAR_DIV     ; calcula dividendo - divisor
            JB p1_MSB_MENOR ; se B=1, dividendo < divisor

        p1_MSB_MAIOR:
            LDA DIVD_P_MSB  ; se D >= v
            SUB VAR_DIV     ; pode subtrair
            STA DIVD_P_MSB
            LDA DIVD_P_LSB  ; e novo dígito de DIVD_P_LSB
            OR CONST_UM     ; deve ser igual a 1
            STA DIVD_P_LSB

        p1_MSB_MENOR:
            LDA VAR_I
            SUB CONST_UM    ; decrementa contador
            STA VAR_I
            JNZ REPETIR_P1  ; se i > 0, repete o laço

    ; ------ aqui, o resto vai estar em DIVD_P_MSB ---------

    RESTO_EH_ZERO_P1:
        LDA DIVD_P_MSB
        JZ INCREMENTA_P1     ; se o resto é zero, p1 não é primo, pois é divisivel por um numero que não é ele ou 1

    INCREMENTA_DIV_P1:
        LDA VAR_DIV
        ADD CONST_UM
        STA VAR_DIV 	; VAR_DIV += 1
        JMP P1_EH_IGUAL_DIV ; testamos se P1 é divisivel por algum outro número

INCREMENTA_P1:
    LDA p1_LSB
    ADD CONST_UM
    STA p1_LSB	; p1_LSB += 1
    LDA p1_MSB
    JV DEU_CARRY_P1 	; se V = 1, precisamos somar + 1 na parte alta
    JMP NAO_DEU_CARRY_P1	; senão, podemos verificar se o novo p1 é primo

    DEU_CARRY_P1:
        ADD CONST_UM
        STA p1_MSB

    NAO_DEU_CARRY_P1:
        JMP VERIFICA_P1_EH_PRIMO

P1_EH_PRIMO:
    LDA n_LSB
    SUB p1_LSB  
    STA p2_LSB	; p2_LSB = n_LSB - p1_LSB
    LDA n_MSB
    JB DEU_BORROW_P2	; se deu borrow, temos que tirar 1 manualmente da parte alta
    JMP NAO_DEU_BORROW_P2 ; senão, podemos tirar p1_MSB direto

    DEU_BORROW_P2:
        SUB CONST_UM

    NAO_DEU_BORROW_P2:
        SUB p1_MSB
        STA p2_MSB	; p2_MSB = n_MSB - p1_MSB
    
    VERIFICA_P2_EH_PRIMO:
        LDA CONST_DOIS
        STA VAR_DIV

        P2_EH_IGUAL_DIV:
            LDA p2_LSB
            SUB VAR_DIV
            STA VAR_LSB_AUX
	    JZ P2_EH_PRIMO ; se p2_LSB - VAR_DIV for zero aqui, o numero pode ter 9 bits, mas já podemos resetar aqui
			   ; pois no nosso caso o divisor só vai ter até oito bits como queremos a soma de dois numeros de 16 bits
            LDA p2_MSB
            JB DEU_BORROW_P2_DIV
            JMP NAO_DEU_BORROW_P2_DIV

            DEU_BORROW_P2_DIV:
                SUB CONST_UM       ; tira '1' da parte alta

            NAO_DEU_BORROW_P2_DIV:
                ADD VAR_LSB_AUX
                JZ P2_EH_PRIMO     ; p2_MSB + p2_LSB = 0? Se sim, é porque p2 é igual a div, o que significa que p2 é primo
        
        MOD_P2_DIV: ; p2 % div
            INICIALIZA_P2:
                LDA p2_MSB
                STA DIVD_P_MSB ; variável do dividendo p2 msb
                LDA p2_LSB 
                STA DIVD_P_LSB ; variável do dividendo p2 lsb
                LDA CONST_OITO
                STA VAR_I
            
            REPETIR_P2: ; início do laço
                LDA DIVD_P_LSB
                SHL
                STA DIVD_P_LSB  ; desloca DIVD_P_LSB p/esquerda
                LDA DIVD_P_MSB
                ROL             ; desloca DIVD_P_MSB p/esquerda
                STA DIVD_P_MSB  ; msbit de DIVD_P_MSB em carry
                JC p2_MSB_MAIOR ; se C=1, dividendo > divisor
                LDA DIVD_P_MSB
                SUB VAR_DIV     ; calcula dividendo - divisor
                JB p2_MSB_MENOR ; se B=1, dividendo < divisor

            p2_MSB_MAIOR:
                LDA DIVD_P_MSB  ; se dividendo >= vai
                SUB VAR_DIV     ; pode subtrair
                STA DIVD_P_MSB
                LDA DIVD_P_LSB  ; e novo dígito de DIVD_P_LSB
                OR CONST_UM     ; deve ser igual a 1
                STA DIVD_P_LSB

            p2_MSB_MENOR:
                LDA VAR_I
                SUB CONST_UM    ; decrementa contador
                STA VAR_I
                JNZ REPETIR_P2  ; se i > 0, repete o laço

    ; ------- aqui, o resto vai estar em DIVD_P_MSB ------------------------

        RESTO_EH_ZERO_P2:      ; se o resto for zero, p2 não é primo, 
                               ; então deve se fazer p1 += 1 e procurar outro p1 primo
            LDA DIVD_P_MSB
            JZ INCREMENTA_P1
        
        INCREMENTA_DIV_P2:
            LDA VAR_DIV
            ADD CONST_UM
            STA VAR_DIV ; VAR_DIV += 1
            JMP P2_EH_IGUAL_DIV ; checamos se p2 é divisivel por algum outro numero

    P2_EH_PRIMO:
        HLT	; fim, os dois numeros são primos.



ORG 220          ; começando na palavra 220
    ; entradas
    n_MSB: DB    ; byte mais significativo de n
    n_LSB: DB    ; byte menos significativo de n
    
    ; saídas
    p1_MSB: DB 0 ; byte mais significativo de p1
    p1_LSB: DB 0 ; byte menos significativo de p1
    p2_MSB: DB 0 ; byte mais significativo de p2
    p2_LSB: DB 0 ; byte menos significativo de p2

ORG 226                  ; começando na palavra 226
    ; variáveis
    VAR_DIV:      DB 0   ; variável div
    VAR_LSB_AUX:  DB 0   ; variável auxiliar para verificações
    DIVD_P_MSB:   DB 0   ; msbits do dividendo p (no fim, é o resto)
    DIVD_P_LSB:   DB 0   ; lsbits do dividendo p (no fim é o quociente)
    VAR_I:        DB 0   ; contador

    ; constantes
    CONST_ZERO: DB 0    ; constante 0
    CONST_UM:   DB 1    ; constante 1
    CONST_DOIS: DB 2    ; constante 2
    CONST_OITO: DB 8    ; constante 8
